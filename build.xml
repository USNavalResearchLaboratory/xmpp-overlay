<!-- Build file for XOP
    Author:  David Millar
    Date:  January 4, 2010
    updated: dnguyen 2011-05-12
 -->

<project name="XOP" default="dist" basedir=".">
    <description>XOP: XMPP Client proxy</description>

    <property name="build" location="build" />
    <property name="lib" location="lib" />
    <property name="dist" location="dist" />
    <property name="src" location="src" />
    <property name="test" location="test" />
    <property name="test.lib" location="test-lib" />
    <property name="test.build" location="test-build" />
    <property name="docs" location="docs" />
    <property name="guides" location="guides" />

    <property name="configs" location="config" />
    <property name="bin" location="bin" />
    <property name="plugins" location="plugins" />

    <property name="jar.name" value="xop.jar" />
    <property name="main.class" value="edu.drexel.xop.Run" />
    <property name="creator" value="Drexel University" />

    <property name="components.dir" value="components" />
    <property name="android.proj.dir" value="XOAndroidProject" />

    <property name="deploy.dir" value="/coreapps/xop" />

    <property name="norm.jar" value="norm-jni.jar" />
    <property name="LIB_PATH" location="${lib}" />

    <available file="${lib}/${norm.jar}" property="norm.jar.exists" />
    <available file="config/logging.properties" property="logging.properties.exists" />

    <path id="project.classpath">
        <fileset dir="${lib}" id="jars">
            <include name="*.jar" />
        </fileset>
        <filelist>
            <file name="${jar.name}" />
        </filelist>
    </path>

   <target name="copy-logging-props" unless="logging.properties.exists" description="copy logging.properties.template to logging.properties in config dir">
      <echo>
        Copying config/logging.properties.template to config/logging.properties.
        Please edit config/logging.properties
      </echo>
      <copy file="config/logging.properties.template" tofile="config/logging.properties"/>
   </target>

   <target name="check-norm-jar" unless="norm.jar.exists">
      <echo>${norm.jar} not found, please build this and place in ${lib} dir</echo>
   </target>

    <!-- [ Init ] -->
    <target name="init" depends="copy-logging-props,check-norm-jar">
        <mkdir dir="${build}" />
        <mkdir dir="${dist}" />
        <mkdir dir="${docs}" />
    </target>

    <target name="test-init" depends="init">
        <mkdir dir="${test.build}" />
    </target>

    <!-- [ Compile ] -->
    <target name="compile" depends="init" description="--> compile the source for the client">
        <javac srcdir="${src}" destdir="${build}" includeantruntime="false" debug="on">
            <classpath refid="project.classpath" />
            <src path="${src}" />
        </javac>

        <copy todir="${build}" flatten="false">
            <fileset dir="${src}">
                <include name="**/*.xml" />
            </fileset>
        </copy>

        <copy todir="${build}/config">
            <fileset dir="${configs}">
                <include name="*" />
            </fileset>
        </copy>
    </target>

    <!-- [ dist-all -->
    <target name="dist-all" depends="dist,guides,javadoc" />

    <!-- [ Dist ] -->
    <target name="dist" depends="compile,jar"
            description="generate the distribution jar">
        <!-- Copy libs, configs, and plugins to dist dir -->
        <copy todir="${dist}/lib">
            <fileset dir="${lib}" />
        </copy>
        <copy todir="${dist}/config">
            <fileset dir="${configs}" />
        </copy>
        <copy todir="${dist}/plugins">
            <fileset dir="${plugins}" />
        </copy>
        <copy todir="${dist}/plugins">
            <fileset dir="${plugins}" />
        </copy>
        <!-- Copy bin/* to dest, ensuring that all such files are executable -->
        <copy todir="${dist}">
            <fileset dir="${bin}" excludes="*.launch,generate*sh"/>
        </copy>
        <chmod perm="a+x" type="file" dir="${dist}" includes="**/* **/*.sh"
               excludes="**/*.jar **/*.xml **/*.txt" />
        <!-- End of copy -->

        <echo>Building components</echo>
        <antcall target="build-components"/>
        <echo>Deploying components</echo>
      <antcall target="deploy-components"/>
    </target>

    <target name="full" depends="dist,javadoc,guides"
        description="Generates the distribution jar and documentation">
        <!-- blank -->
    </target>

   <target name="undeploy" description="undeploys XOP from ${deploy.dir}">
      <echo>Deleting the contents under ${deploy.dir}</echo>
      <delete includeemptydirs="true">
         <fileset dir="${deploy.dir}" includes="**/*" excludes="**/.svn"/>
      </delete>
   </target>

   <target name="deploy" depends="dist" description="Deploys the built XOP, components, and dependencies to the dir: ${deploy.dir}">
      <echo>deploying the contents of ${dist} to ${deploy.dir}</echo>
      <copy todir="${deploy.dir}">
         <fileset dir="${dist}"/>
      </copy>
      <chmod perm="a+x" type="file" dir="${deploy.dir}" includes="**/* **/*.sh" excludes="**/*.jar **/*.xml **/*.txt **/*.properties" />
   </target>

    <target name="build-components" description="Build components in components dir">
        <subant target="dist">
            <fileset dir="${components.dir}" includes="**/build.xml" />
        </subant>

    </target>

    <target name="deploy-components" description="Deploy the components in the component/dist dirs into plugins dir">
        <subant target="deploy">
            <fileset dir="${components.dir}" includes="**/build.xml" />
        </subant>
    </target>

    <target name="clean-components" description="clean the components in the component/dist dirs into plugins dir">
        <subant target="clean">
            <fileset dir="${components.dir}" includes="**/build.xml" />
        </subant>
    </target>

   <!-- Android deploying and undeploying -->
   <target name="deploy-to-android" depends="dist" description="">
      <copy todir="${android.proj.dir}/libs">
         <fileset dir="${dist}"/>
      </copy>
   </target>

   <target name="undeploy-from-android" description="delete the contents of the XOAndroidProject/libs dir">
      <delete includeemptydirs="true">
         <fileset dir="${android.proj.dir}/libs" includes="**/*"/>
      </delete>
   </target>
   <!-- END Android deploying and undeploying -->

    <!-- make xop.jar -->
    <target name="jar" depends="compile">
      <echo>creating and deploying jar to ${dist}</echo>

        <pathconvert property="mf.classpath" pathsep=" " refid="project.classpath">
            <chainedmapper>
                <!-- Remove absolute path -->
                <flattenmapper />
                <!-- add lib/ prefix -->
                <globmapper from="*" to="lib/*" />
            </chainedmapper>
        </pathconvert>

        <jar basedir="." destfile="${dist}/xop.jar" update="true">
            <include name="src/**/*.java" />
            <include name="docs/**/*" />

            <fileset dir="${build}">
                <include name="**/*.class" />
                <include name="**/*.xml" />
            </fileset>

            <manifest>
                <attribute name="Created-By" value="${creator}" />
                <attribute name="Main-Class" value="${main.class}" />
                <attribute name="Class-Path" value="${mf.classpath}" />
            </manifest>
        </jar>
    </target>

    <!-- [ Clean ] -->
    <target name="clean" depends="clean-test" description="Delete dist directory.">
        <delete dir="${build}" />
        <delete dir="${dist}" />
        <delete dir="${docs}/javadoc" />
        <delete dir="${docs}">
            <include name="*.pdf" />
        </delete>
        <delete dir="${guides}">
            <exclude name="*.tex" />
            <exclude name="lib/*" />
            <exclude name="resources/*" />
        </delete>
        <echo>Cleaning components</echo>
        <antcall target="clean-components"/>
    </target>

    <!-- [ Javadoc ] -->
    <target name="javadoc" depends="init" description="creates javadocs">
        <javadoc packagenames="edu.*" sourcepath="${src}" excludepackagenames="examples.*" destdir="${docs}/javadoc" classpathref="project.classpath" />
    </target>

    <!-- [ Run Tests ] -->
    <path id="test.classpath">
        <path refid="project.classpath" />
        <fileset dir="${test.lib}" includes="*.jar" />
        <pathelement location="${test.build}" />
        <pathelement location="${build}" />
    </path>

    <target name="test-compile" depends="test-init,compile" description="compiles unit tests">
        <echo>Classpath: ${test.classpath}</echo>
        <javac includeantruntime="true" srcdir="${test}" destdir="${test.build}">
            <classpath refid="test.classpath" />
        </javac>
    </target>

    <target name="clean-test">
        <delete dir="${test.build}" />
    </target>

    <target name="test" depends="test-compile" description="Runs unit tests">
        <junit printsummary="yes">
            <!-- this system property is set for TestXopProperties.testGetSystemProperties() -->
            <sysproperty key="xop.bind.interface" value="test.bind.interface" />
            <classpath refid="test.classpath" />
            <formatter type="brief" usefile="false" />
            <batchtest>
                <fileset dir="${test.build}" includes="**/*Test.class" />
            </batchtest>
        </junit>
    </target>

    <target name="test-Gump" depends="test-compile" description="run GUMP test program">
        <java fork="true" classname="NetworkStuffTest">
            <classpath refid="test.classpath" />
        </java>
    </target>

    <target name="run-openmsock" depends="test-compile" description="run OpenMulticastSock test program">
        <java fork="true" classname="OpenMulticastSock">
            <classpath refid="test.classpath" />
        </java>
    </target>

    <!-- [ Generate Manuals ] -->
    <taskdef name="latex" classname="de.dokutransdata.antlatex.LaTeX" classpath="guides/lib/ant_latex_0.0.9_1.jar" />

    <target name="guides">
        <!-- run latex -->
        <latex verbose="off" clean="on" pdftex="on" workingDir="${guides}">
            <makeindex run="on" workingDir="${guides}">
                <fileset dir="${guides}">
                    <include name="*.nlo" />
                </fileset>
            </makeindex>
            <bibtex run="on" workingDir="${guides}" />
            <fileset dir="${guides}">
                <include name="*.tex" />
                <include name="*.sty" />
            </fileset>
        </latex>
    </target>

    <target name="bogus">
        <!-- Get rid of dvi files... -->
        <delete dir="${guides}">
            <exclude name="*.tex" />
            <exclude name="*.sty" />
        </delete>
        <!-- Copy PDFs to docs directory -->
        <move todir="docs">
            <fileset dir="${guides}">
                <include name="*.pdf" />
            </fileset>
        </move>
    </target>

</project>
