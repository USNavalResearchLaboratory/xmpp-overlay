Configuring Logging in XOP
April 16, 2012
Duc Nguyen
==========================

= Intro =
Logging in XOP uses java.util.logging facility built into the current
version of Java SDK. There are a number of convenience functions in
edu.drexel.xop.util.logger.LogUtils.

The rest of this intro is dedicated to the history and lineage of XOP
logging. If you only care about configuring and using XOP logging, skip
to the next section. <TODO>

= Configuration =

== Logging config file ==
By default, any Java LogManager uses the configuration file located in
the lib directory of the JRE location. On Ubuntu-flavor systems, this is
under /usr/lib/jvm/sun-jdk-6/jre/lib/logging.properties. 

XOP uses a custom logging.properties that overrides the default config
file in the JRE directory. This is located in
<xop-home>/config/logging.properties. At runtime, XOP looks in the
<runtime root>/config/logging.properties.

=== Location of logging.properties ===
To override the location of <runtime root>/config/logging.properties,
execute XOP with the system property:
-Djava.util.logging.config.file=<path-to-config>/logging.properties

E.g.:

 > java -Djava.util.logging.config.file=<path-to-config>/logging.properties -jar xop.jar

or 

 > ./run.sh -D java.util.logging.config.file=<path-to-config>/logging.properties

== Configuring Logging Properties ==

XOP uses a custom log record formatter,
edu.drexel.xop.util.logger.DefaultFormatter, which puts each log message
on a single line, specifies the Class name and method, timestamp
(YYYYMMdd-hhmmss), and executing thread number ("t: 10").

The formatter is specified in logging.properties property:
 > java.util.logging.ConsoleHandler.formatter=edu.drexel.xop.util.logger.DefaultFormatter
 
NOTE: Do not change the property:
java.util.logging.ConsoleHandler.level=FINEST. This is the lowest level
that the ConsoleHandler will output, however, this is overridden by the
Logger level. i.e., if the ConsoleHandler level is set to INFO and the
logger using that ConsoleHandler is set to FINE, only INFO level
messages will be set. Conversely, ConsoleHandler.level=FINEST and
logger.level=INFO will log INFO messages or higher.

=== Setting Logging Levels ===
The global logging level is set by the .level property (by default .level=INFO). 

It is possible to set package level logging for a group of classes in a
package by setting the package level logger:

 edu.drexel.xop.level=FINE

Classes can override this by setting their own level.
e.g.:
 edu.drexel.xop.Run.level=FINE

This sets the logging level of the Run class to FINE, overriding the
package logging level.

= Development =
XOP Developers using the logging facilities should use static methods in
the LogUtils class in package edu.drexel.xop.util.logger.

For example, at the top of each class (that uses logging) a static
private Logger field is created for each class.

e.g., in Run.java:
public class Run {
   private static Logger logger = LogUtils.getLogger(Run.class.getName());
   ...

Then you can log messages in two ways:

   logger.log(Level.FINE, "log message at FINE logging level");
   
   or
   
   logger.fine("log message at FINE logging level");

Using the formatter class edu.drexel.xop.util.logger.DefaultFormatter
will output records looking like this:

[FINE (120415) MucRoom.removeOccupant() t: 35] Cannot remove null occupant

== Using Logger with Exceptions ==
Use SEVERE and WARNING log levels to display stacktrace of thrown
exceptions:

e.g.
  ...
} catch (Exception e){
  logger.log(Level.SEVERE, "Exception caught!", e);
  ...
}


